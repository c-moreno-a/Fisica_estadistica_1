# -*- coding: utf-8 -*-
"""f. est 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lptJz5Q3Wcg1au7d-6TQrH_vcuRUXVll
"""

import matplotlib.pyplot as plt
import numpy as np

def posicion (N):
  """esta función retorna la posición final después de N pasos aleatorios"""
  x = 0 # inicia en 0
  for i in range(N): #este bucle suma o resta 1 a la posición de x en cada paso
    d = 2*(np.random.randint(0,2))-1 #genera un número uniformemente distribuido en {-1,1}
    x += d
  return x

def momentos ():
  """esta función retorna los primeros dos momentos de veinte repeticiones del experimento,
    cada una con un número aleatorio de pasos entre 100 y 1000"""

  N = []
  primer_momento = []
  segundo_momento = []

  for i in range(20):
    N.append(np.random.randint(100,1001)) #se generan aleatoriamente los valores de N para cada experimento
    X_N = []
    for j in range(N[i]):
      X_N.append(posicion(N[i]))
    primer_momento.append(np.mean(X_N)) #se registra el primer momento
    segundo_momento.append(np.var(X_N)-primer_momento[i]**2) # se registra el segundo momento

  return primer_momento, segundo_momento, N

def grafica_pos (N):
  """esta función grafica un histograma de las posiciones finales de N pasos aleatorios"""

  L=[]
  for i in range(50000): #se repite el experimento para 50000 veces para el N dado
    L.append(posicion(N))

  cajas = np.arange(min(L), max(L)+1, 2)
  plt.figure()
  plt.hist(L, bins=cajas, density=True, label="Datos de la simulación") #histograma de los datos obtenidos
  plt.plot(cajas, 1/np.sqrt(2*np.pi*N)*np.exp(-cajas**2/(2*N)), 'r', label="Distribución gaussiana") #ley de probabilidad gaussiana
  plt.title(f"Histograma normalizado para {N} pasos")
  plt.xlabel('Posición final')
  plt.ylabel('Probabilidad')
  plt.legend()
  plt.show()

def grafica_momentos ():
  """esta función grafica los primeros momentos en función de N y estima el
    coeficiente de difusión"""
  x, x2, N = momentos()
  m1, b1 = np.polyfit(N,x,1)
  m2,b2 = np.polyfit(N,x2,1)
  regN = np.arange(min(N), max(N)+1, 100)

  plt.figure() #gráfica del primer momento
  plt.scatter(N, x)
  plt.plot(regN, m1*regN+b1, 'r')
  plt.xlabel('N')
  plt.ylabel('Primer momento')
  plt.title("Primer momento en función de N")
  plt.show()

  print("")

  plt.figure() #gráfica del segundo momento
  plt.scatter(N, x2)
  plt.plot(regN, m2*(regN)+b2, 'r')
  plt.xlabel('N')
  plt.ylabel('Segundo momento')
  plt.title("Segundo momento en función de N")
  plt.show()

  """Notamos que de la relación <x^2>=a^2 N, obtenemos <x^2>=2D\tau N
     de ahí, la estimación de D*tau es igual a la pendiente de la gráfica del segundo momento
     dividida entre dos"""

  print("")
  print(f"El producto D*tau es {m2/2}")



n = int(input("Introduzca el número de pasos:"))
print("")
grafica_pos(n)
print("")
print("Presione ENTER para continuar con las gráficas de los momentos y la estimación de D")
input("Este paso puede tardar")
grafica_momentos()